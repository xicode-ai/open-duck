# 样式和CSS规则

## CSS 方案架构

- **原子化CSS**: UnoCSS (主要)
- **预处理器**: SCSS (辅助)
- **全局样式**: [src/style/index.scss](mdc:src/style/index.scss)
- **字体文件**: [src/style/fonts/](mdc:src/style/fonts/)

## UnoCSS 配置

基于 [uno.config.ts](mdc:uno.config.ts) 的配置：

### 平台适配

- **小程序**: 使用 applet 预设，单位为 rpx
- **H5/APP**: 使用标准预设，单位为 rem
- **最终效果**: `mt-4` 在小程序为 32rpx，在 H5 为 1rem

### 预设功能

```typescript
// 图标支持
presetIcons() // 使用: i-carbon-sun

// 属性化支持
presetAttributify() // 使用: fg:text-red

// 颜色函数兼容
presetLegacyCompat() // rgb(255 0 0) -> rgb(255, 0, 0)
```

### 自定义快捷语句

```typescript
shortcuts: [
  ['center', 'flex justify-center items-center'],
  ['text-primary', 'text-yellow'],
]
```

### 安全区域适配

```typescript
rules: [
  [
    'p-safe',
    {
      padding:
        'env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left)',
    },
  ],
  ['pt-safe', { 'padding-top': 'env(safe-area-inset-top)' }],
  ['pb-safe', { 'padding-bottom': 'env(safe-area-inset-bottom)' }],
]
```

## 样式使用原则

### 优先级

1. **UnoCSS 原子类** (最优先)
2. **组件 scoped 样式** (组件特有)
3. **全局样式** (最少使用)

### 响应式设计

```vue
<template>
  <!-- 响应式布局 -->
  <view class="w-full md:w-1/2 lg:w-1/3">
    <!-- 内容 -->
  </view>

  <!-- 暗色模式 -->
  <view class="bg-white dark:bg-gray-800">
    <!-- 内容 -->
  </view>
</template>
```

### 常用类名模式

```scss
// 布局
.container {
  @apply max-w-screen-xl mx-auto px-4;
}
.flex-center {
  @apply flex items-center justify-center;
}
.flex-between {
  @apply flex items-center justify-between;
}

// 文本
.text-title {
  @apply text-lg font-medium text-gray-900;
}
.text-body {
  @apply text-sm text-gray-600;
}
.text-caption {
  @apply text-xs text-gray-400;
}

// 间距
.section-padding {
  @apply px-4 py-6;
}
.card-padding {
  @apply p-4;
}

// 边框
.border-light {
  @apply border border-gray-200;
}
.rounded-card {
  @apply rounded-lg;
}
```

## SCSS 使用场景

### 复杂样式逻辑

```scss
.custom-component {
  // 使用 SCSS 处理复杂逻辑
  &.is-active {
    @apply bg-primary text-white;

    .icon {
      transform: rotate(180deg);
      transition: transform 0.3s ease;
    }
  }

  // 深度选择器
  :deep(.uni-input-input) {
    @apply text-gray-700;
  }
}
```

### 动画和过渡

```scss
.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.3s ease;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}

.slide-up {
  transform: translateY(100%);
  transition: transform 0.3s ease;

  &.show {
    transform: translateY(0);
  }
}
```

## 主题和设计令牌

### 颜色系统

```scss
// 主色调
$primary: #018d71;
$primary-light: #4ade80;
$primary-dark: #166534;

// 语义化颜色
$success: #22c55e;
$warning: #f59e0b;
$error: #ef4444;
$info: #3b82f6;

// 中性色
$gray-50: #f9fafb;
$gray-100: #f3f4f6;
$gray-900: #111827;
```

### 间距系统

```scss
// 基础间距单位
$spacing-xs: 0.25rem; // 4px
$spacing-sm: 0.5rem; // 8px
$spacing-md: 1rem; // 16px
$spacing-lg: 1.5rem; // 24px
$spacing-xl: 2rem; // 32px
```

## 图标使用

### UnoCSS 图标

```vue
<template>
  <!-- Carbon 图标库 -->
  <view class="i-carbon-sun w-6 h-6" />
  <view class="i-carbon-moon w-6 h-6" />

  <!-- 自定义大小和颜色 -->
  <view class="i-carbon-home w-8 h-8 text-primary" />
</template>
```

### SVG 图标组件

参考 [src/components/SvgIcon.vue](mdc:src/components/SvgIcon.vue)

## 平台差异处理

### 条件编译

```scss
/* #ifdef H5 */
.h5-only {
  backdrop-filter: blur(10px);
}
/* #endif */

/* #ifdef MP-WEIXIN */
.mp-only {
  // 小程序特有样式
}
/* #endif */
```

### 安全区域

```vue
<template>
  <!-- 状态栏安全区域 -->
  <view class="pt-safe">
    <!-- 内容 -->
  </view>

  <!-- 底部安全区域 -->
  <view class="pb-safe">
    <!-- 内容 -->
  </view>
</template>
```

## 性能优化

### CSS 优化

- 避免深层嵌套选择器
- 合理使用 scoped 样式
- 减少重复样式定义
- 使用 CSS 变量提高可维护性

### 打包优化

- UnoCSS 按需生成
- 删除未使用的样式
- CSS 压缩和合并
  description:
  globs:
  alwaysApply: false

---
