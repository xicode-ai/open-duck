# 文件组织和命名规则

## 目录结构规范

基于 unibest 项目的目录结构，确保文件组织清晰有序。

### 根目录结构

```
hello-unibest/
├── .cursor/              # Cursor 配置和规则
├── .vscode/              # VS Code 配置
├── env/                  # 环境变量配置
├── mock/                 # Mock 数据
├── shell/                # 构建脚本
├── src/                  # 源代码目录
├── types/                # 全局类型定义
├── vite-plugins/         # Vite 插件
├── package.json          # 项目依赖
├── vite.config.ts        # 构建配置
├── uno.config.ts         # UnoCSS 配置
├── tsconfig.json         # TypeScript 配置
└── README.md             # 项目说明
```

### src 目录详细结构

```
src/
├── pages/                # 主包页面
│   ├── index/           # 首页模块
│   ├── demo/            # 示例页面模块
│   ├── login/           # 登录模块
│   └── my/              # 个人中心模块
├── pages-sub/           # 分包页面
│   └── demo/            # 示例分包
├── components/          # 全局组件
│   ├── common/          # 通用业务组件
│   ├── ui/              # UI 基础组件
│   └── layout/          # 布局组件
├── layouts/             # 页面布局模板
├── store/               # 状态管理
├── utils/               # 工具函数
├── hooks/               # 组合式函数
├── composables/         # 可复用逻辑
├── interceptors/        # 拦截器
├── service/             # API 服务
├── locale/              # 国际化
├── assets/              # 静态资源
├── static/              # 公共静态资源
├── style/               # 全局样式
├── types/               # 类型定义
├── plugins/             # 插件
├── directives/          # 自定义指令
├── filters/             # 过滤器
└── constants/           # 常量定义
```

## 文件命名规范

### 通用命名规则

- **文件夹**: 使用小写字母和连字符 (`kebab-case`)
- **Vue 文件**: 使用 PascalCase 或 kebab-case
- **TypeScript 文件**: 使用 camelCase 或 kebab-case
- **样式文件**: 使用 kebab-case
- **配置文件**: 使用 kebab-case 或点分格式

### 页面文件命名

```
pages/
├── index/
│   ├── index.vue        # 页面主文件
│   ├── components/      # 页面专属组件
│   │   ├── UserCard.vue
│   │   └── DataList.vue
│   └── hooks/           # 页面专属 hooks
│       └── useUserData.ts
├── demo/
│   ├── index.vue
│   ├── base/
│   │   ├── auto-import.vue
│   │   ├── css.vue
│   │   └── request.vue
│   └── page/
│       ├── echarts/
│       │   ├── index.vue
│       │   └── echartsData.ts
│       └── i18n.vue
```

### 组件文件命名

```
components/
├── common/              # 通用业务组件
│   ├── UserAvatar/
│   │   ├── index.vue    # 主组件文件
│   │   ├── types.ts     # 类型定义
│   │   └── README.md    # 组件文档
│   ├── DataTable/
│   │   ├── index.vue
│   │   ├── TableHeader.vue
│   │   ├── TableBody.vue
│   │   └── types.ts
│   └── ImageUploader/
│       ├── index.vue
│       ├── hooks/
│       │   └── useUpload.ts
│       └── utils/
│           └── imageProcessor.ts
├── ui/                  # UI 基础组件
│   ├── Button/
│   │   ├── index.vue
│   │   ├── Button.scss
│   │   └── types.ts
│   ├── Input/
│   └── Modal/
└── layout/              # 布局组件
    ├── Header/
    ├── Footer/
    └── Sidebar/
```

### 工具函数组织

```
utils/
├── index.ts             # 导出所有工具函数
├── common.ts            # 通用工具函数
├── format.ts            # 格式化工具
├── validate.ts          # 验证工具
├── date.ts              # 日期处理
├── url.ts               # URL 处理
├── storage.ts           # 存储工具
├── platform.ts          # 平台判断
├── request.ts           # 请求工具
├── file.ts              # 文件处理
└── crypto.ts            # 加密工具
```

### API 服务组织

```
service/
├── index.ts             # API 统一导出
├── base.ts              # 基础 API 配置
├── user.ts              # 用户相关 API
├── product.ts           # 产品相关 API
├── order.ts             # 订单相关 API
├── upload.ts            # 文件上传 API
└── types/               # API 类型定义
    ├── user.ts
    ├── product.ts
    └── common.ts
```

## 模块导入导出规范

### 统一导出模式

```typescript
// ✅ utils/index.ts - 统一导出
export * from './common'
export * from './format'
export * from './validate'
export * from './date'
export { default as storage } from './storage'

// ✅ 默认导出 + 命名导出
export { formatDate, formatCurrency } from './format'
export { validateEmail, validatePhone } from './validate'
```

### 组件导出规范

```typescript
// ✅ components/index.ts
export { default as UserAvatar } from './common/UserAvatar'
export { default as DataTable } from './common/DataTable'
export { default as Button } from './ui/Button'
export { default as Input } from './ui/Input'

// ✅ 按模块分组导出
export * as CommonComponents from './common'
export * as UIComponents from './ui'
export * as LayoutComponents from './layout'
```

### Store 导出规范

```typescript
// ✅ store/index.ts
import { createPinia } from 'pinia'
import { createPersistedState } from 'pinia-plugin-persistedstate'

const store = createPinia()
store.use(
  createPersistedState({
    storage: {
      getItem: uni.getStorageSync,
      setItem: uni.setStorageSync,
    },
  }),
)

export default store

// 模块统一导出
export * from './user'
export * from './app'
export * from './count'

// 类型导出
export type * from './types'
```

## 文件内容组织规范

### Vue 单文件组件结构

```vue
<template>
  <!-- 模板内容 -->
</template>

<script setup lang="ts">
// 1. 编译器指令
defineOptions({
  name: 'ComponentName',
})

// 2. 导入依赖
import { ref, computed, onMounted } from 'vue'
import { useStore } from '@/store'
import type { ComponentProps } from './types'

// 3. 类型定义
interface Props {
  title: string
  visible?: boolean
}

interface Emits {
  (e: 'update:visible', value: boolean): void
  (e: 'confirm', data: any): void
}

// 4. Props 和 Emits
const props = withDefaults(defineProps<Props>(), {
  visible: false,
})

const emit = defineEmits<Emits>()

// 5. 响应式数据
const loading = ref(false)
const formData = reactive({
  name: '',
  email: '',
})

// 6. 计算属性
const isValid = computed(() => {
  return formData.name && formData.email
})

// 7. 组合式函数
const { userInfo } = useStore()

// 8. 方法定义
const handleSubmit = () => {
  if (!isValid.value) return
  // 处理提交逻辑
}

const handleCancel = () => {
  emit('update:visible', false)
}

// 9. 生命周期
onMounted(() => {
  // 初始化逻辑
})

// 10. 暴露给模板
defineExpose({
  reset: () => {
    Object.assign(formData, { name: '', email: '' })
  },
})
</script>

<style lang="scss" scoped>
/* 组件样式 */
</style>
```

### TypeScript 文件结构

```typescript
// 1. 文件头注释
/**
 * @fileoverview 用户管理相关工具函数
 * @author Your Name
 * @created 2024-01-01
 */

// 2. 导入依赖
import type { IUserInfo } from '@/types'
import { storage } from '@/utils/storage'
import { validateEmail } from '@/utils/validate'

// 3. 类型定义
interface UserManagerOptions {
  cacheExpiry?: number
  autoSync?: boolean
}

// 4. 常量定义
const DEFAULT_OPTIONS: UserManagerOptions = {
  cacheExpiry: 24 * 60 * 60 * 1000, // 24小时
  autoSync: true,
}

const STORAGE_KEYS = {
  USER_INFO: 'user_info',
  USER_PREFERENCES: 'user_preferences',
} as const

// 5. 主要功能实现
export class UserManager {
  private options: UserManagerOptions

  constructor(options: UserManagerOptions = {}) {
    this.options = { ...DEFAULT_OPTIONS, ...options }
  }

  public async getUserInfo(): Promise<IUserInfo | null> {
    // 实现逻辑
  }

  public async updateUserInfo(userInfo: Partial<IUserInfo>): Promise<void> {
    // 实现逻辑
  }

  private validateUserInfo(userInfo: IUserInfo): boolean {
    // 验证逻辑
  }
}

// 6. 导出
export const userManager = new UserManager()
export default UserManager

// 7. 工具函数导出
export const isValidUser = (user: any): user is IUserInfo => {
  return user && typeof user.id !== 'undefined' && validateEmail(user.email)
}
```

## 静态资源组织

### 图片资源

```
src/assets/
├── images/              # 业务图片
│   ├── avatar/         # 头像相关
│   ├── banner/         # 轮播图
│   ├── icon/           # 图标
│   └── placeholder/    # 占位图
├── svg/                # SVG 图标
│   ├── common/         # 通用图标
│   ├── nav/            # 导航图标
│   └── action/         # 操作图标
└── fonts/              # 字体文件
    ├── iconfont/       # 图标字体
    └── custom/         # 自定义字体

src/static/             # 公共静态资源
├── tabbar/             # tabbar 图标
├── logo/               # Logo 相关
└── common/             # 通用图片
```

### 样式文件组织

```
src/style/
├── index.scss          # 样式入口文件
├── variables.scss      # SCSS 变量
├── mixins.scss         # SCSS 混合器
├── reset.scss          # 样式重置
├── base.scss           # 基础样式
├── layout.scss         # 布局样式
├── components/         # 组件样式
│   ├── button.scss
│   ├── input.scss
│   └── modal.scss
├── pages/              # 页面样式
│   ├── home.scss
│   ├── login.scss
│   └── profile.scss
└── themes/             # 主题样式
    ├── light.scss
    └── dark.scss
```

## 配置文件组织

### 环境配置

```
env/
├── .env.development    # 开发环境
├── .env.test          # 测试环境
├── .env.production    # 生产环境
└── README.md          # 环境配置说明
```

### 构建配置

```
hello-unibest/
├── vite.config.ts          # Vite 主配置
├── uno.config.ts           # UnoCSS 配置
├── tsconfig.json           # TypeScript 配置
├── commitlint.config.cjs   # 提交规范配置
├── manifest.config.ts      # uni-app 应用配置
└── pages.config.ts         # 页面路由配置
```

## 文档组织

### 项目文档

```
docs/
├── README.md           # 项目总览
├── DEVELOPMENT.md      # 开发指南
├── DEPLOYMENT.md       # 部署指南
├── API.md              # API 文档
├── CHANGELOG.md        # 更新日志
├── CONTRIBUTING.md     # 贡献指南
└── components/         # 组件文档
    ├── Button.md
    ├── Input.md
    └── Modal.md
```

### 代码注释规范

````typescript
/**
 * 格式化用户信息显示
 * @param user - 用户信息对象
 * @param options - 格式化选项
 * @param options.showEmail - 是否显示邮箱
 * @param options.maskPhone - 是否脱敏手机号
 * @returns 格式化后的用户信息字符串
 * @example
 * ```typescript
 * const formatted = formatUserDisplay(user, { showEmail: true })
 * console.log(formatted) // "张三 (zhang@example.com)"
 * ```
 */
export const formatUserDisplay = (
  user: IUserInfo,
  options: {
    showEmail?: boolean
    maskPhone?: boolean
  } = {},
): string => {
  // 实现逻辑
}
````

## 最佳实践

### 文件命名原则

1. **一致性**: 整个项目使用统一的命名规范
2. **可读性**: 文件名要能清楚表达其用途
3. **简洁性**: 避免过长的文件名
4. **分类性**: 相关文件放在同一目录下

### 目录组织原则

1. **功能分组**: 按功能模块组织文件
2. **层次清晰**: 避免过深的目录嵌套
3. **职责单一**: 每个目录有明确的用途
4. **易于维护**: 便于添加、删除和修改文件

### 导入路径规范

```typescript
// ✅ 使用绝对路径导入
import { useRequest } from '@/hooks/useRequest'
import { formatDate } from '@/utils/format'
import type { IUserInfo } from '@/types'

// ✅ 同级文件使用相对路径
import { validateForm } from './validate'
import { defaultConfig } from './config'

// ✅ 第三方库放在最前面
import { ref, computed } from 'vue'
import dayjs from 'dayjs'
```

description:
globs:
alwaysApply: false

---
