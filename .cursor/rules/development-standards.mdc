# 开发规范规则

## 基本原则

- 始终优先选择简单方案
- 尽可能避免代码重复
- 修改代码前检查现有功能实现
- 编写代码时明确区分开发/测试/生产环境
- 谨慎修改代码，仅针对明确需求进行更改

## 代码质量要求

- 控制单文件代码行数：超过 200-300行 时需重构封装
- 避免在文件中编写一次性脚本（如数据迁移脚本）
- 保持代码库整洁有序
- 修复问题时避免引入新技术/模式，优先排查现有实现

## 环境规范

- **开发环境**: 本地开发调试，支持热更新
- **测试环境**: 允许使用模拟数据进行测试
- **生产环境**: 严禁使用模拟（Mock）数据

## 数据库操作规范

- 多数据表操作时必须保证事务一致性
- 要么都成功，要么都失败
- 避免数据不一致问题

## 代码稳定性

- 确保修改不会影响其他功能的正常运行
- 充分测试相关功能模块
- 遵循向后兼容原则

## 环境文件保护

- **禁止覆盖 .env 文件**
- 修改环境配置前必须确认并征得同意
- 环境变量变更需要文档记录

## 代码格式化工具

- ESLint: JavaScript/TypeScript 代码检查
- Prettier: 代码格式化
- Stylelint: CSS/SCSS 样式检查
- Husky + lint-staged: Git 提交前自动检查

## Git 提交规范

- 使用 Conventional Commits 规范
- 通过 commitlint 进行提交信息检查
- 提交前自动运行代码检查和格式化
  description:
  globs:
  alwaysApply: false

---
