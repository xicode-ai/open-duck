# Unibest 项目架构规则

## 项目概述

unibest 是基于 uni-app 的跨平台开发模板，支持 H5、微信小程序、支付宝小程序、APP 等多个平台。采用现代化的前端技术栈，提供完整的开发、构建、部署解决方案。

## 核心技术栈

### 前端技术栈

- **前端框架**: Vue 3.3+ (Composition API)
- **类型系统**: TypeScript 4.9+
- **跨平台框架**: uni-app 3.0+
- **构建工具**: Vite 4.3.5 (快速热重载、ESM)

### 状态管理

- **状态管理**: Pinia 2.0+ (Vue 3 官方推荐)
- **数据持久化**: pinia-plugin-persistedstate
- **存储适配**: uni-app 统一存储接口

### 样式解决方案

- **原子化CSS**: UnoCSS 0.58+ (按需生成)
- **预处理器**: SCSS (复杂样式逻辑)
- **跨端适配**: UnoCSS applet 预设 (小程序端)
- **设计系统**: 统一的设计令牌和主题

### UI 组件生态

- **官方组件**: @dcloudio/uni-ui (uni-app 官方)
- **第三方组件**: @climblee/uv-ui (跨端兼容)
- **设计组件**: wot-design-uni (微信风格)
- **图表组件**: ECharts 5.6+ (数据可视化)

### 工具链

- **日期处理**: dayjs (轻量级)
- **工具函数**: lodash-es (ESM 版本)
- **URL 处理**: qs (查询字符串)
- **国际化**: vue-i18n 9.10+

## 架构分层设计

### 1. 表现层 (Presentation Layer)

```
┌─────────────────────────────────────┐
│              表现层 (UI)              │
├─────────────────────────────────────┤
│ • 页面组件 (Pages)                   │
│ • 布局组件 (Layouts)                 │
│ • 业务组件 (Components)              │
│ • 基础组件 (UI Components)           │
└─────────────────────────────────────┘
```

### 2. 业务逻辑层 (Business Logic Layer)

```
┌─────────────────────────────────────┐
│            业务逻辑层                 │
├─────────────────────────────────────┤
│ • 组合式函数 (Composables/Hooks)    │
│ • 业务工具函数 (Business Utils)      │
│ • 表单验证 (Validation)             │
│ • 业务规则 (Business Rules)         │
└─────────────────────────────────────┘
```

### 3. 数据管理层 (Data Management Layer)

```
┌─────────────────────────────────────┐
│             数据管理层                │
├─────────────────────────────────────┤
│ • 状态管理 (Pinia Stores)           │
│ • 数据缓存 (Cache)                  │
│ • 数据持久化 (Persistence)          │
│ • 数据同步 (Synchronization)        │
└─────────────────────────────────────┘
```

### 4. 服务层 (Service Layer)

```
┌─────────────────────────────────────┐
│              服务层                  │
├─────────────────────────────────────┤
│ • API 服务 (API Services)           │
│ • HTTP 客户端 (HTTP Client)         │
│ • 请求拦截器 (Interceptors)         │
│ • 错误处理 (Error Handling)         │
└─────────────────────────────────────┘
```

### 5. 基础设施层 (Infrastructure Layer)

```
┌─────────────────────────────────────┐
│            基础设施层                 │
├─────────────────────────────────────┤
│ • 平台适配 (Platform Adapter)       │
│ • 工具函数 (Utils)                  │
│ • 类型定义 (Types)                  │
│ • 常量配置 (Constants)              │
└─────────────────────────────────────┘
```

## 详细目录结构

### 源码目录架构

```
src/
├── pages/                    # 📱 页面层
│   ├── index/               # 首页模块
│   ├── demo/                # 示例页面
│   ├── login/               # 登录模块
│   └── my/                  # 个人中心
├── pages-sub/               # 📦 分包页面
│   └── demo/                # 示例分包
├── layouts/                 # 🏗️ 布局层
│   ├── default.vue          # 默认布局
│   └── demo.vue             # 示例布局
├── components/              # 🧩 组件层
│   ├── common/              # 业务组件
│   ├── ui/                  # 基础组件
│   └── layout/              # 布局组件
├── composables/             # 🔄 逻辑复用层
│   ├── hooks/               # 组合式函数
│   └── shared/              # 共享逻辑
├── store/                   # 📊 状态管理层
│   ├── modules/             # 状态模块
│   ├── index.ts             # Store 配置
│   └── types.ts             # Store 类型
├── service/                 # 🌐 服务层
│   ├── api/                 # API 接口
│   ├── http/                # HTTP 配置
│   └── mock/                # Mock 数据
├── interceptors/            # 🛡️ 拦截器层
│   ├── request.ts           # 请求拦截
│   ├── response.ts          # 响应拦截
│   └── route.ts             # 路由拦截
├── utils/                   # 🔧 工具层
│   ├── common/              # 通用工具
│   ├── format/              # 格式化工具
│   ├── validate/            # 验证工具
│   └── platform/            # 平台工具
├── assets/                  # 🎨 资源层
│   ├── images/              # 图片资源
│   ├── icons/               # 图标资源
│   ├── fonts/               # 字体资源
│   └── svg/                 # SVG 资源
├── style/                   # 💄 样式层
│   ├── global/              # 全局样式
│   ├── themes/              # 主题样式
│   ├── variables/           # 样式变量
│   └── mixins/              # 样式混合
├── locale/                  # 🌍 国际化层
│   ├── zh-Hans.json         # 简体中文
│   ├── en.json              # 英文
│   └── index.ts             # i18n 配置
├── types/                   # 📝 类型定义层
│   ├── global.d.ts          # 全局类型
│   ├── api.d.ts             # API 类型
│   ├── components.d.ts      # 组件类型 (自动生成)
│   └── auto-import.d.ts     # 自动导入类型 (自动生成)
├── plugins/                 # 🔌 插件层
│   ├── directives/          # 自定义指令
│   ├── filters/             # 过滤器
│   └── install.ts           # 插件安装
└── constants/               # 📋 常量层
    ├── api.ts               # API 常量
    ├── storage.ts           # 存储常量
    └── config.ts            # 配置常量
```

## 数据流架构

### 单向数据流设计

```
┌─────────────┐    用户交互    ┌──────────────┐
│   UI 组件    │ ────────────→ │  事件处理器   │
│ (Template)  │               │  (Methods)   │
└─────────────┘               └──────────────┘
       ↑                              │
       │ 响应式更新                     │ 调用 Action
       │                              ↓
┌─────────────┐               ┌──────────────┐
│  响应式状态  │               │ Store Actions │
│ (Reactive)  │ ←─────────────│  (Business)  │
└─────────────┘    状态变更     └──────────────┘
                              │
                              │ API 调用
                              ↓
                     ┌──────────────┐
                     │ API 服务层    │
                     │ (Services)   │
                     └──────────────┘
```

### 状态管理架构

```typescript
// Store 架构设计
interface StoreArchitecture {
  // 用户状态管理
  user: {
    state: UserState // 用户信息、权限、偏好
    getters: UserGetters // 计算属性：isLoggedIn、hasPermission
    actions: UserActions // 登录、注销、更新资料
  }

  // 应用状态管理
  app: {
    state: AppState // 主题、语言、网络状态
    getters: AppGetters // 计算属性：isDark、isMobile
    actions: AppActions // 切换主题、设置语言
  }

  // 业务状态管理
  business: {
    state: BusinessState // 业务数据、缓存
    getters: BusinessGetters // 业务计算属性
    actions: BusinessActions // 业务操作方法
  }
}
```

## 路由架构设计

### 路由层次结构

```
pages/                       # 主包路由
├── index/                   # 首页路由组
│   ├── index.vue           # /pages/index/index
│   └── detail.vue          # /pages/index/detail
├── user/                    # 用户路由组
│   ├── profile.vue         # /pages/user/profile
│   └── settings.vue        # /pages/user/settings
└── demo/                    # 示例路由组
    ├── index.vue           # /pages/demo/index
    └── detail.vue          # /pages/demo/detail

pages-sub/                   # 分包路由
└── business/                # 业务分包
    ├── order.vue           # /pages-sub/business/order
    └── payment.vue         # /pages-sub/business/payment
```

### 路由配置架构

```typescript
// 路由元信息配置
interface RouteConfig {
  path: string // 路由路径
  name?: string // 路由名称
  component: Component // 页面组件
  meta?: {
    title?: string // 页面标题
    needLogin?: boolean // 需要登录
    keepAlive?: boolean // 页面缓存
    permissions?: string[] // 所需权限
    layout?: string // 布局模板
  }
}
```

## 组件架构体系

### 组件分层架构

```
UI 组件生态架构:

┌─────────────────────────────────────────────────────────┐
│                     页面组件层                           │
│  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐      │
│  │   首页组件   │ │   列表页面   │ │   详情页面   │      │
│  └─────────────┘ └─────────────┘ └─────────────┘      │
└─────────────────────────────────────────────────────────┘
┌─────────────────────────────────────────────────────────┐
│                     业务组件层                           │
│  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐      │
│  │   用户卡片   │ │   商品列表   │ │   订单详情   │      │
│  └─────────────┘ └─────────────┘ └─────────────┘      │
└─────────────────────────────────────────────────────────┘
┌─────────────────────────────────────────────────────────┐
│                     基础组件层                           │
│  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐      │
│  │   按钮组件   │ │   输入框     │ │   模态框     │      │
│  └─────────────┘ └─────────────┘ └─────────────┘      │
└─────────────────────────────────────────────────────────┘
┌─────────────────────────────────────────────────────────┐
│                   第三方组件库                           │
│  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐      │
│  │   uni-ui    │ │    uv-ui    │ │wot-design-uni│      │
│  └─────────────┘ └─────────────┘ └─────────────┘      │
└─────────────────────────────────────────────────────────┘
```

### 组件通信架构

```typescript
// 组件通信模式
interface ComponentCommunication {
  // 父子组件通信
  propsEmits: {
    props: Props // 父 → 子数据传递
    emits: Emits // 子 → 父事件触发
  }

  // 跨层级组件通信
  provideInject: {
    provide: ProvideData // 祖先组件提供数据
    inject: InjectData // 后代组件注入数据
  }

  // 全局状态通信
  store: {
    state: GlobalState // 全局响应式状态
    actions: StoreActions // 状态变更方法
  }

  // 事件总线通信
  eventBus: {
    emit: EventEmit // 事件发布
    on: EventListen // 事件监听
  }
}
```

## 多端适配架构

### 平台适配策略

```typescript
// 平台适配架构
interface PlatformAdapter {
  // 条件编译适配
  conditionalCompilation: {
    '#ifdef H5': 'H5端特有代码'
    '#ifdef MP-WEIXIN': '微信小程序代码'
    '#ifdef APP-PLUS': 'APP端代码'
    '#ifndef H5': '非H5端代码'
  }

  // API适配层
  apiAdapter: {
    storage: UnifiedStorage // 统一存储接口
    request: UnifiedRequest // 统一请求接口
    navigation: UnifiedNav // 统一导航接口
  }

  // 样式适配层
  styleAdapter: {
    units: 'rpx | rem | px' // 单位适配
    layout: 'flex | grid' // 布局适配
    platform: 'mp | h5 | app' // 平台样式
  }
}
```

### 构建适配架构

```typescript
// 构建配置适配
interface BuildAdapter {
  // 平台构建配置
  platforms: {
    h5: Vite.H5Config
    'mp-weixin': Vite.MPConfig
    'app-plus': Vite.AppConfig
  }

  // 插件适配
  plugins: {
    uniPages: '页面自动路由'
    uniLayouts: '布局系统'
    unoCSS: '原子化CSS'
    autoImport: '自动导入'
  }
}
```

## 性能架构设计

### 性能优化策略

```typescript
// 性能架构设计
interface PerformanceArchitecture {
  // 代码分割
  codeSplitting: {
    routes: '路由懒加载'
    components: '组件懒加载'
    vendors: '第三方库分割'
  }

  // 缓存策略
  caching: {
    http: '请求缓存'
    component: '组件缓存'
    static: '静态资源缓存'
  }

  // 渲染优化
  rendering: {
    virtual: '虚拟滚动'
    lazy: '图片懒加载'
    skeleton: '骨架屏'
  }
}
```

## 安全架构设计

### 安全防护体系

```typescript
// 安全架构设计
interface SecurityArchitecture {
  // 数据安全
  dataSecurity: {
    encryption: '数据加密'
    validation: '输入验证'
    sanitization: '数据清理'
  }

  // 网络安全
  networkSecurity: {
    https: 'HTTPS强制'
    csrf: 'CSRF防护'
    xss: 'XSS防护'
  }

  // 权限安全
  authSecurity: {
    authentication: '身份认证'
    authorization: '权限控制'
    tokenRefresh: '令牌刷新'
  }
}
```

## 构建部署架构

### 构建流水线

```
开发阶段 → 代码检查 → 单元测试 → 构建打包 → 部署发布

├── 开发阶段
│   ├── ESLint 代码检查
│   ├── Prettier 代码格式化
│   ├── TypeScript 类型检查
│   └── Stylelint 样式检查
│
├── 测试阶段
│   ├── 单元测试 (Vitest)
│   ├── 组件测试 (Vue Test Utils)
│   ├── E2E测试 (Playwright)
│   └── 性能测试
│
├── 构建阶段
│   ├── Vite 构建优化
│   ├── 代码分割
│   ├── 资源压缩
│   └── 环境变量注入
│
└── 部署阶段
    ├── H5 静态部署
    ├── 小程序发布
    ├── APP 打包发布
    └── CDN 资源部署
```

## 监控与运维架构

### 应用监控体系

```typescript
// 监控架构设计
interface MonitoringArchitecture {
  // 性能监控
  performance: {
    pageLoad: '页面加载性能'
    apiResponse: '接口响应时间'
    memory: '内存使用监控'
  }

  // 错误监控
  errorTracking: {
    jsError: 'JavaScript错误'
    apiError: '接口错误'
    pageError: '页面错误'
  }

  // 用户行为监控
  userBehavior: {
    pageView: '页面访问'
    userAction: '用户操作'
    conversion: '转化率分析'
  }
}
```

## 关键配置文件详解

### 核心配置文件作用

- **[package.json](mdc:package.json)** - 项目元信息、依赖管理、脚本配置
- **[vite.config.ts](mdc:vite.config.ts)** - 构建配置、插件配置、开发服务器
- **[tsconfig.json](mdc:tsconfig.json)** - TypeScript 编译配置、路径映射
- **[uno.config.ts](mdc:uno.config.ts)** - UnoCSS 配置、平台适配、主题定制
- **[src/pages.json](mdc:src/pages.json)** - 页面路由、导航配置、分包配置
- **[src/main.ts](mdc:src/main.ts)** - 应用入口、插件注册、全局配置
- **[manifest.config.ts](mdc:manifest.config.ts)** - uni-app 应用配置、平台特性

### 环境配置架构

```
env/
├── .env.development     # 开发环境变量
├── .env.test           # 测试环境变量
├── .env.production     # 生产环境变量
└── README.md           # 环境配置说明

环境变量优先级: .env.local > .env.[mode] > .env
```

## 开发最佳实践

### 架构原则

1. **单一职责**: 每个模块只负责一个功能
2. **开闭原则**: 对扩展开放，对修改关闭
3. **依赖倒置**: 依赖抽象而非具体实现
4. **接口隔离**: 使用多个专门的接口
5. **组合优于继承**: 通过组合实现复用

### 模块化设计

1. **高内聚**: 模块内部功能紧密相关
2. **低耦合**: 模块间依赖关系最小化
3. **可测试**: 易于编写单元测试
4. **可维护**: 代码结构清晰，易于理解
5. **可扩展**: 便于添加新功能

### 性能考虑

1. **按需加载**: 路由、组件、第三方库懒加载
2. **缓存策略**: HTTP缓存、组件缓存、状态缓存
3. **资源优化**: 图片压缩、代码压缩、Tree Shaking
4. **渲染优化**: 虚拟滚动、防抖节流、合理使用计算属性

这套架构设计确保了 unibest 项目的可维护性、可扩展性和高性能，为团队开发提供了清晰的指导方针。
