# 构建和部署规则

## 构建配置

基于 [vite.config.ts](mdc:vite.config.ts) 和 [package.json](mdc:package.json) 的构建配置。

## 环境管理

### 环境分类

- **development**: 本地开发环境
- **test**: 测试环境
- **production**: 生产环境

### 环境变量配置

环境变量文件放在 [env/](mdc:env/) 目录：

```
env/
├── .env.development    # 开发环境
├── .env.test          # 测试环境
└── .env.production    # 生产环境
```

### 环境变量命名规范

```bash
# 必须以 VITE_ 开头才能在客户端访问
VITE_APP_TITLE=unibest
# VITE_APP_PORT=3000  # 注释：让 Vite 自动分配端口
VITE_SERVER_BASEURL=https://api.example.com
VITE_DELETE_CONSOLE=false
```

## 构建脚本

### 开发命令

```bash
# H5 开发
pnpm dev
pnpm dev:h5

# 小程序开发
pnpm dev:mp-weixin
pnpm dev:mp-alipay

# APP 开发
pnpm dev:app
pnpm dev:app-android
pnpm dev:app-ios

# 指定环境
pnpm dev-dev        # development
pnpm dev-test       # test
pnpm dev-prod       # production
```

### 构建命令

```bash
# H5 构建
pnpm build
pnpm build:h5

# 小程序构建
pnpm build:mp-weixin
pnpm build:mp-alipay

# APP 构建
pnpm build:app
pnpm build:app-android
pnpm build:app-ios
```

## 构建优化

### Vite 插件配置

- **UniPages**: 页面自动路由
- **UniLayouts**: 页面布局系统
- **UniComponents**: 组件自动注册
- **UnoCSS**: 原子化 CSS
- **AutoImport**: 自动导入 API

### 生产环境优化

```typescript
// vite.config.ts
export default defineConfig({
  build: {
    target: 'es2015',
    minify: 'terser',
    terserOptions: {
      compress: {
        drop_console: env.VITE_DELETE_CONSOLE === 'true',
        drop_debugger: env.VITE_DELETE_CONSOLE === 'true',
      },
    },
  },

  plugins: [
    // 打包分析
    mode === 'production' &&
      visualizer({
        filename: './node_modules/.cache/visualizer/stats.html',
        open: true,
        gzipSize: true,
        brotliSize: true,
      }),

    // 图片压缩 (仅生产环境)
    imagemin(mode === 'production'),
  ],
})
```

## 平台特定配置

### H5 部署

```typescript
// H5 构建配置
export default defineConfig({
  base: '/', // 部署路径
  server: {
    host: '0.0.0.0',
    // port: 让 Vite 自动分配端口
    proxy: {
      '/api': {
        target: 'http://localhost:8080',
        changeOrigin: true,
      },
    },
  },
})
```

### 小程序配置

- **微信小程序**: 使用微信开发者工具上传
- **支付宝小程序**: 使用支付宝开发者工具
- **其他小程序**: 使用对应平台开发工具

### APP 配置

- **manifest.json**: APP 基础配置
- **签名证书**: 生产环境需要正式签名
- **权限配置**: 根据功能需求配置权限

## 代码质量检查

### ESLint 配置

```bash
# 代码检查
pnpm lint:eslint

# 自动修复
pnpm lint:eslint --fix
```

### Prettier 格式化

```bash
# 代码格式化
pnpm lint:prettier

# 自动格式化
pnpm lint:prettier --write
```

### TypeScript 检查

```bash
# 类型检查
pnpm type-check
```

## Git Hooks

### Pre-commit 检查

基于 Husky + lint-staged：

```json
{
  "lint-staged": {
    "**/*.{html,vue,ts,cjs,json,md}": ["prettier --write"],
    "**/*.{vue,js,ts,jsx,tsx}": ["eslint --fix"],
    "**/*.{vue,css,scss,html}": ["stylelint --fix --allow-empty-input"]
  }
}
```

### Commit 规范

使用 Conventional Commits：

```bash
feat: 新功能
fix: 修复bug
docs: 文档更新
style: 代码格式
refactor: 代码重构
test: 测试相关
chore: 构建配置
```

## 部署策略

### H5 部署

```bash
# 构建
pnpm build:h5

# 部署到静态服务器
# dist/ 目录包含所有静态文件
```

### 小程序部署

```bash
# 构建
pnpm build:mp-weixin

# 使用开发者工具上传
# dist/build/mp-weixin/ 目录
```

### APP 部署

```bash
# 构建
pnpm build:app

# 使用 HBuilderX 或 uni-app CLI 打包
# 生成 APK/IPA 文件
```

## CI/CD 配置

### GitHub Actions 示例

```yaml
name: Build and Deploy

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build H5
        run: pnpm build:h5

      - name: Deploy to Static Server
        # 部署脚本
```

## 性能监控

### 构建分析

```bash
# 启用构建分析
ANALYZE=true pnpm build:h5

# 查看打包分析报告
# node_modules/.cache/visualizer/stats.html
```

### 资源优化

- **图片压缩**: 生产环境自动压缩图片
- **代码分割**: 按页面和组件分割代码
- **懒加载**: 路由和组件按需加载
- **缓存策略**: 合理设置静态资源缓存

## 环境切换

### 本地切换

```bash
# 切换到测试环境构建
pnpm build --mode test

# 切换到生产环境构建
pnpm build --mode production
```

### 配置验证

```typescript
// 运行时环境验证
console.log('当前环境:', import.meta.env.MODE)
console.log('API地址:', import.meta.env.VITE_SERVER_BASEURL)
console.log('是否生产环境:', import.meta.env.PROD)
```

description:
globs:
alwaysApply: false

---
